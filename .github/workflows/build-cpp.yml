name: Build C++ SDK

on:
  # pull_request:
  #   branches:
  #     - master
  workflow_dispatch:
  push:
    branches:
      - test

env:
  LIBS_PATH: ${{ github.workspace }}/libs
  BOOST_VERSION: 1.83.0
  NLOHMANN_JSON_VERSION: v3.11.2
  LLVM_VERSION: 17.0.1

jobs:
  generate_schemas:
    uses: ./.github/workflows/generate_schemas.yml

  build_rust:
    uses: ./.github/workflows/build-rust-cross-platform.yml

  build_cpp:
    name: Build C++
    needs:
      - generate_schemas
      - build_rust
    runs-on: ${{ matrix.settings.os }}
    strategy:
      matrix:
        settings:
          - os: macos-12
            target: x86_64-apple-darwin
            compiler: llvm-${{ env.LLVM_VERSION }}}
            prefix: lib
            extension: dylib
            architecture: x86_64
          - os: macos-12
            target: aarch64-apple-darwin
            prefix: lib
            extension: dylib
            architecture: arm64
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            compiler: llvm-${{ env.LLVM_VERSION }}
            prefix: lib
            extension: so
            architecture: x86_64
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            compiler: msvc
            prefix: ""
            extension: dll
            architecture: x86_64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Download C++ schemas artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: schemas.hpp
          path: languages/cpp/include

      - name: Setup C++ for macOS arm64
        if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='arm64'
        run: |
          LLVM_ARM_NAME=LLVMEmbeddedToolchainForArm-${{ env.LLVM_VERSION }}-Darwin
          wget -q https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm/releases/download/release-${{ env.LLVM_VERSION }}/${LLVM_ARM_NAME}.dmg
          hdiutil attach ${LLVM_ARM_NAME}.dmg
          sleep 5 # wait for dmg to mount
          mkdir -p ${HOME}/llvm
          echo "${HOME}/llvm/bin" >> $GITHUB_PATH
          cd /Volumes/${LLVM_ARM_NAME}
          cp -rf "/Volumes/${LLVM_ARM_NAME}/${LLVM_ARM_NAME}/" ${HOME}/llvm

      - name: Setup C++
        if: "matrix.settings.architecture=='x86_64'"
        uses: aminya/setup-cpp@v0.36.0
        with:
          compiler: ${{ matrix.settings.compiler }}
          vcvarsall: ${{ contains(matrix.settings.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: true
          clangtidy: true

      - name: Download x86_64-apple-darwin files
        if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='x86_64'
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: libbitwarden_c_files-x86_64-apple-darwin
          path: languages/cpp/build

      - name: Download aarch64-apple-darwin files
        if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='arm64'
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: libbitwarden_c_files-aarch64-apple-darwin
          path: languages/cpp/build

      - name: Download x86_64-unknown-linux-gnu files
        if: contains(matrix.settings.os, 'ubuntu')
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: libbitwarden_c_files-x86_64-unknown-linux-gnu
          path: languages/cpp/build

      - name: Download x86_64-pc-windows-msvc files
        if: contains(matrix.settings.os, 'windows')
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: libbitwarden_c_files-x86_64-pc-windows-msvc
          path: languages/cpp/build

      - name: Create libs folder
        if: "!contains(matrix.settings.os, 'windows')"
        run: mkdir -p libs/nlohmann_json libs/boost

      - name: Download Dependencies for *nix (nlohmann_json)
        if: "!contains(matrix.settings.os, 'windows')"
        working-directory: ${{ env.LIBS_PATH }}
        run: |
          wget -q https://github.com/nlohmann/json/archive/refs/tags/${{ env.NLOHMANN_JSON_VERSION }}.tar.gz
          tar -xf ${{ env.NLOHMANN_JSON_VERSION }}.tar.gz --strip-components=1 -C nlohmann_json

      - name: Download Dependencies for *nix (boost)
        if: "!contains(matrix.settings.os, 'windows')"
        working-directory: ${{ env.LIBS_PATH }}
        run: |
          wget -q https://github.com/boostorg/boost/releases/download/boost-${{ env.BOOST_VERSION }}/boost-${{ env.BOOST_VERSION }}.zip
          tar -xf boost-${{ env.BOOST_VERSION }}.tar.gz --strip-components=1 -C boost
          cd boost
          if [[ "${{ matrix.settings.architecture }}" == "x86_64" ]]; then
            ./bootstrap.sh --with-toolset=clang --prefix=${{ env.LIBS_PATH }}/boost
            ./b2 toolset=clang install --prefix=${{ env.LIBS_PATH }}/boost --with-headers
          else
            ./bootstrap.sh --with-toolset=clang --prefix=${{ env.LIBS_PATH }}/boost
            ./b2 toolset=clang architecture=arm address-model=64 install --prefix=${{ env.LIBS_PATH }}/boost --with-headers
          fi

      - name: Download Dependencies for Windows (nlohmann_json)
        if: "contains(matrix.settings.os, 'windows')"
        working-directory: ${{ env.LIBS_PATH }}
        run: |
          Invoke-WebRequest -Uri "https://github.com/nlohmann/json/archive/refs/tags/${{ env.NLOHMANN_JSON_VERSION }}.zip" -OutFile "${{ env.NLOHMANN_JSON_VERSION }}.zip"
          Expand-Archive -Path "${{ env.NLOHMANN_JSON_VERSION }}.zip" -DestinationPath ".\nlohmann_json"

      - name: Download Dependencies for Windows (boost)
        if: "contains(matrix.settings.os, 'windows')"
        working-directory: ${{ env.LIBS_PATH }}
        env:
          BOOST_FILENAME: boost-${{ env.BOOST_VERSION }}.zip
        run: |
          Invoke-WebRequest -Uri "https://github.com/boostorg/boost/releases/download/boost-${{ env.BOOST_VERSION }}/${{ env.BOOST_FILENAME }}" -OutFile "${{ env.BOOST_FILENAME }}"
          Expand-Archive -Path "${{ env.BOOST_FILENAME }}" -DestinationPath ".\boost"
          Set-Location -Path ".\boost"
          .\bootstrap.bat
          .\b2 install --prefix=${{ env.LIBS_PATH }}\boost

      - name: Build C++ Project for x86_64 *nix
        if: "!contains(matrix.settings.os, 'windows') && matrix.settings.architecture=='x86_64'"
        working-directory: languages/cpp/build
        run: |
          cmake .. -DNLOHMANN=${{ env.LIBS_PATH }}/nlohmann_json/include -DBOOST=${{ env.LIBS_PATH }}/include -DTARGET=./build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }}
          cmake --build .

      - name: Build C++ Project for arm64 macOS
        if: "matrix.settings.architecture=='arm64' && contains(matrix.settings.os, 'macos')"
        working-directory: languages/cpp/build
        run: |
          cmake .. -DNLOHMANN=${{ env.LIBS_PATH }}/nlohmann_json/include -DBOOST=${{ env.LIBS_PATH }}/boost/include -DTARGET=./build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }} -DCMAKE_OSX_ARCHITECTURES=arm64 # -DCMAKE_CXX_COMPILER=/usr/local/bin/aarch64-none-elf-g++
          cmake --build .

      - name: Build C++ Project for Windows
        if: "contains(matrix.settings.os, 'windows')"
        working-directory: languages/cpp/build
        run: |
          cmake .. -DNLOHMANN=${{ env.LIBS_PATH }}/nlohmann_json/include -DBOOST=${{ env.LIBS_PATH }}/include/boost-1_83 -DTARGET=./build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }}
          cmake --build .

      - name: Upload C++ package
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: Bitwarden-SDK-${{ matrix.settings.target }}
          path: |
            ./languages/cpp/build/${{ matrix.settings.prefix }}BitwardenClient.${{ matrix.settings.extension }}
            ./languages/cpp/build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }}
            ./languages/cpp/include/
            ./languages/cpp/examples/
            ./languages/cpp/README.md
            ./languages/cpp/ExampleUse.md
