name: Build C++ SDK

on:
  # pull_request:
  #   branches:
  #     - master
  workflow_dispatch:
  push:
    branches:
      - experiment/actions

env:
  LIBS_PATH: ${{ github.workspace }}/libs

jobs:
  # generate_schemas:
  #   uses: ./.github/workflows/generate_schemas.yml

  # build_rust:
  #   uses: ./.github/workflows/build-rust-cross-platform.yml

  build_cpp:
    name: Build C++
    runs-on: ${{ matrix.settings.os }}
    strategy:
      matrix:
        settings:
          # - os: macos-12
          #   target: x86_64-apple-darwin
          #   compiler: llvm
          #   prefix: lib
          #   extension: dylib
          #   architecture: x86_64
          - os: macos-12
            target: aarch64-apple-darwin
            compiler: llvm
            prefix: lib
            extension: dylib
            architecture: arm64
    #       - os: ubuntu-22.04
    #         target: x86_64-unknown-linux-gnu
    #         compiler: llvm
    #         prefix: lib
    #         extension: so
    #         architecture: x86_64
    #       - os: windows-2022
    #         target: x86_64-pc-windows-msvc
    #         compiler: msvc
    #         prefix: ""
    #         extension: dll
    #         architecture: x86_64
    # needs:
    #   - generate_schemas
    # - build_rust

    steps:
      - name: Checkout Repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      # - name: Download C++ schemas artifact
      #   uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      #   with:
      #     name: schemas.hpp
      #     path: languages/cpp/include

      - name: Download C++ schemas artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: slobokv83/sdk
          workflow: build-rust-cross-platform.yml
          search_artifacts: true
          run_id: 6698638146
          name: schemas.hpp
          path: languages/cpp/include
        if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='arm64'

      - name: Setup C++
        uses: aminya/setup-cpp@v0.36.0
        with:
          compiler: ${{ matrix.settings.compiler }}
          vcvarsall: ${{ contains(matrix.settings.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: true
          clangtidy: true

      # - name: Download x86_64-apple-darwin files
      #   uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      #   with:
      #     name: libbitwarden_c_files-x86_64-apple-darwin
      #     path: languages/cpp/build
      #   if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='x86_64'

      # - name: Download aarch64-apple-darwin files
      #   uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      #   with:
      #     name: libbitwarden_c_files-aarch64-apple-darwin
      #     path: languages/cpp/build
      #   if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='arm64'

      - name: Download aarch64-apple-darwin files
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: slobokv83/sdk
          workflow: build-rust-cross-platform.yml
          search_artifacts: true
          run_id: 6693506085
          name: libbitwarden_c_files-aarch64-apple-darwin
          path: languages/cpp/build
        if: contains(matrix.settings.os, 'macos') && matrix.settings.architecture=='arm64'

      - name: Download x86_64-unknown-linux-gnu files
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: libbitwarden_c_files-x86_64-unknown-linux-gnu
          path: languages/cpp/build
        if: contains(matrix.settings.os, 'ubuntu')

      - name: Download x86_64-pc-windows-msvc files
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: libbitwarden_c_files-x86_64-pc-windows-msvc
          path: languages/cpp/build
        if: contains(matrix.settings.os, 'windows')

      - name: Create libs folder
        run: mkdir libs

      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: ${{ env.LIBS_PATH }}
          key: libs

      - name: Download Dependencies
        if: "!contains(matrix.settings.os, 'windows') && steps.cache.outputs.cache-hit != 'true'"
        working-directory: ${{ env.LIBS_PATH }}
        run: |
          wget https://github.com/nlohmann/json/archive/refs/tags/v3.11.2.tar.gz
          tar -xvf v3.11.2.tar.gz
          wget https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.tar.gz
          tar -xvf boost_1_83_0.tar.gz
          cd boost_1_83_0
          ./bootstrap.sh --prefix=${{ env.LIBS_PATH }}
          ./b2 install

      - name: Cache boost and json
        uses: actions/cache@v3.3.2
        with:
          path: ${{ env.LIBS_PATH }}
          key: libs

      - name: Download Windows Dependencies
        if: "contains(matrix.settings.os, 'windows')"
        working-directory: ${{ env.LIBS_PATH }}
        run: |
          Invoke-WebRequest -Uri "https://github.com/nlohmann/json/archive/refs/tags/v3.11.2.zip" -OutFile "v3.11.2.zip"
          Expand-Archive -Path "v3.11.2.zip" -DestinationPath ".\"
          Invoke-WebRequest -Uri "https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.zip" -OutFile "boost_1_83_0.zip"
          Expand-Archive -Path "boost_1_83_0.zip" -DestinationPath ".\"
          Set-Location -Path ".\boost_1_83_0"
          .\bootstrap.bat
          .\b2 install --prefix=${{ env.LIBS_PATH }}

      - name: Build C++ Project
        if: "!contains(matrix.settings.os, 'windows') && matrix.settings.architecture=='x86_64'"
        working-directory: languages/cpp/build
        run: |
          cmake .. -DNLOHMANN=${{ env.LIBS_PATH }}/json-3.11.2/include -DBOOST=${{ env.LIBS_PATH }}/include -DTARGET=./build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }}
          cmake --build .

      # - name: Install Homebrew (macOS only)
      #   if: contains(matrix.settings.os, 'macos') && !contains(matrix.settings.architecture, 'x86_64')
      #   run: |
      #     which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

      # - name: Install ARM Toolchain (macOS only)
      #   if: contains(matrix.settings.os, 'macos') && !contains(matrix.settings.architecture, 'x86_64')
      #   run: brew tap ArmMbed/homebrew-formulae && brew install arm-none-eabi-gcc

      - name: Build Mac Arm C++ Project
        if: "matrix.settings.architecture=='arm64'"
        working-directory: languages/cpp/build
        run: |
          cmake .. -DNLOHMANN=${{ env.LIBS_PATH }}/json-3.11.2/include -DBOOST=${{ env.LIBS_PATH }}/include -DTARGET=./build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }} -DCMAKE_OSX_ARCHITECTURES=arm64 -DLLVM_TARGETS_TO_BUILD=ARM
          cmake --build .
          cp ./Debug/${{ matrix.settings.prefix }}BitwardenClient.${{ matrix.settings.extension }} .

      - name: Build Windows C++ Project
        if: "contains(matrix.settings.os, 'windows')"
        working-directory: languages/cpp/build
        run: |
          cmake .. -DNLOHMANN=${{ env.LIBS_PATH }}/json-3.11.2/include -DBOOST=${{ env.LIBS_PATH }}/include/boost-1_83 -DTARGET=./build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }}
          cmake --build .
          copy ./Debug/${{ matrix.settings.prefix }}BitwardenClient.${{ matrix.settings.extension }}

      - name: Upload C++ package
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: Bitwarden-SDK-${{ matrix.settings.target }}
          path: |
            ./languages/cpp/build/${{ matrix.settings.prefix }}BitwardenClient.${{ matrix.settings.extension }}
            ./languages/cpp/build/${{ matrix.settings.prefix }}bitwarden_c.${{ matrix.settings.extension }}
            ./languages/cpp/include/
            ./languages/cpp/examples/
            ./languages/cpp/README.md
            ./languages/cpp/ExampleUse.md
